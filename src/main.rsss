// #![feature(plugin)]
// #![plugin(oak)]

// extern crate oak_runtime;
// use oak_runtime::*;
// // use rust_decimal::Decimal;

// type ExprResult = Result<ExprValue, ExprError>;

// pub enum ExprValue{
//     Int (i32),
//     Float (f32),
//     // Decimal(Decimal),
//     Str (String),
// }

// pub enum ExprError{
//     Std(String),
// }

// grammar! csharp{
//   //   #![show_api]

//   sum = number ("+" number)* > add
//   number = ["0-9"]+ > to_number

//   use std::str::FromStr;
//   use super::*;

//   fn add(x: ExprResult, rest: Vec<ExprResult>) -> ExprResult {
    
//     match x {
//         Ok(ExprValue::Int(i)) => {
//             i += 10;
//             Ok(ExprValue::Int(i))
//         }
//         Ok(_) => Err(ExprError::Std(String::new() + "Should be an integer."))
//     }
//     // rest.iter().fold(x, |x,y| x+y)
//   }

//   fn to_number(raw_text: Vec<char>) -> ExprResult {
//     let text: String = raw_text.into_iter().collect();
//     match i32::from_str(&*text) {
//         Ok(i) => Ok(ExprValue::Int(i)),
//         Err(e) => Err(ExprError::Std(String::new() + ""))
//     }
//   }
// }

// fn main() {
//   let state = csharp::parse_csharp("7+2+1-5".into_state());
//   assert_eq!(state.unwrap_data(), 10);
// }